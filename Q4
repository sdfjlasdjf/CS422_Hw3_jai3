Substitution-Based Definition:
syntax Exp ::= "callCC" Exp [strict]

// callCC E
// = callcc (lambda origK .
//       callcc (lambda ignoreK .
//         E (lambda x . origK x)))
//
// Explanation:
// The outer callcc captures the original continuation (origK).
// The inner callcc captures another continuation (ignoreK).
// Now, E can invoke origK explicitly to return to the original continuation.
// If E never calls origK, we return into ignoreK and thus never go back to origK.
rule <k> callCC E =>
  callcc (lambda origK .
    callcc (lambda ignoreK .
      E (lambda x . origK x))) </k>

syntax Exp ::= "callcc" Exp [strict]

// callcc E
// = callCC (lambda k . let x = E in (k x))
//
// Explanation:
// If we want a standard callcc that always returns a value, we can
// force callCC to return by explicitly invoking k with the value of E.
rule <k> callcc E =>
  callCC (lambda k .
    let x = E in (k x)) </k>


syntax Exp ::= "callCC" Exp [strict]

// Same idea as substitution-based, but now we carry env/store along.
rule <k> callCC E =>
  callcc (lambda origK .
    callcc (lambda ignoreK .
      E (lambda x . origK x))) </k>


syntax Exp ::= "callcc" Exp [strict]

rule <k> callcc E =>
  callCC (lambda k .
    let x = E in (k x)) </k>

