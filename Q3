// Copyright (c) Runtime Verification, Inc. All Rights Reserved.

module IMP-SYNTAX
  imports DOMAINS-SYNTAX

  syntax AExp  ::= Int | Id
                 | "-" Int
                 | AExp "/" AExp              [left, strict]
                 | "(" AExp ")"               [bracket]
                 > AExp "+" AExp              [left, strict]

  syntax BExp  ::= Bool
                 | AExp "<=" AExp             [seqstrict]
                 | "!" BExp                   [strict]
                 | "(" BExp ")"               [bracket]
                 > BExp "&&" BExp             [left, strict(1)]

  syntax Block ::= "{" "}"
                 | "{" Stmt "}"

  // Add seqstrict to handle the sequential composition of statements
  syntax Stmt  ::= Block
                 | Id "=" AExp ";"            [strict(2)]
                 | "if" "(" BExp ")" Block "else" Block  [strict(1)]
                 | "while" "(" BExp ")" Block
                 > Stmt Stmt                  [left, seqstrict(1)]

  syntax Pgm ::= "int" Ids ";" Stmt
  syntax Ids ::= List{Id,","}
endmodule


module IMP
  imports IMP-SYNTAX
  imports DOMAINS

  // Introduce a KResult for empty statement completion
  syntax KEmpty ::= "{}"
  syntax KResult ::= KEmpty

  configuration <T color="yellow">
                  <k color="green"> $PGM:Pgm </k>
                  <state color="red"> .Map </state>
                </T>

  syntax KResult ::= Int | Bool // Keep Int and Bool as possible KResults

  // AExp
  rule <k> X:Id => I ...</k> <state>... X |-> I ...</state> requires I:Int
  rule I1 / I2 => I1 /Int I2 requires I2 =/=Int 0
  rule I1 + I2 => I1 +Int I2
  rule - I1 => 0 -Int I1

  // BExp
  rule I1 <= I2 => I1 <=Int I2
  rule ! T => notBool T
  rule true && B => B
  rule false && _ => false

  // Block
  // Remove the rule {} => .K and keep {} as is since it's a KResult now
  rule {S} => S

  // Stmt
  // Instead of S1 ~> S2, we rely on seqstrict and a rule that consumes {}:
  rule {} S:Stmt => S

  // When an assignment finishes, it produces {} as a result
  rule <k> X = I:Int; => {} ...</k> <state>... X |-> (_ => I) ...</state>

  // If-else statements produce {} after chosen branch completes
  rule if (true)  S else _ => S
  rule if (false) _ else S => S

  // While loops expand to if statements; {} ends after completion
  rule while (B) S => if (B) { S while (B) S } else {}

  // Pgm
  // Initialize variables to undefined (from previous requirement) 
  // or just leave them unchanged if that requirement is separate.
  syntax KItem ::= "undefined"
  rule <k> int (X,Xs => Xs);_ </k> <state> Rho:Map (.Map => X|->undefined) </state>
    requires notBool (X in keys(Rho))
  rule int .Ids; S => S

  // verification ids
  syntax Id ::= "n"   [token]
              | "sum" [token]

endmodule
